<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>Preview - Tile Server</title>

  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial,Helvetica,sans-serif;
    }

    p {
      padding: 0;
      margin: 0;
    }

    a {
      color: #499dce;
      text-decoration: none;
    }

    a:hover {
      color: #395d73;
    }

    section {
      margin: 15px auto;
      width: 930px;
      padding: 30px 0;
    }

    .title {
      font-size: 28px;
      font-weight: bold;
      color: #ff6347;
      text-align: center;
      margin: 10px 0 55px 0;
    }

    .item {
      height: 190px;
      border-top: 1px dashed #cccccc;
    }

    .item:nth-child(odd) {
      background: #efefef;
    }

    .item img {
      position: absolute;
      display: block;
      margin: 30px;
      width: 128px;
      height: 128px;
      border: 1px solid #cccccc;
    }

    .item .name {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .details {
      float: left;
      height: 128px;
      padding: 20px 30px 20px 188px;
    }

    .details h3 {
      font-size: 15px;
      margin-top: 15px;
      max-width: 550px;
      word-break: break-all;
    }

    .services {
      margin-top: 15px;
    }

    .viewers {
      float: right;
      text-align: center;
      width: 130px;
      margin-top: 25px;
      padding-right: 30px;
    }

    .btn {
      display: block;
      line-height: 25px;
      position: relative;
      overflow: hidden;
      border-radius: 4px;
      margin-top: 15px;
      margin-bottom: 15px;
      background: #499dce;
      color: #ffffff;
      text-decoration: none;
    }

    .btn:hover {
      background: #395d73;
    }

    .tabs {
      display: flex;
      cursor: pointer;
    }

    .tab {
      border: 2px solid #cccccc;
      background: #fefefe;
      user-select: none;
      padding: 10px 10px;
      font-size: 14px;
      z-index: 999;
    }

    .tab:hover {
      background: #ffffff;
    }

    .tab.active {
      font-weight: 700;
    }

    .tab-content {
      display: none;
      border: 2px solid #cccccc;
    }

    .tab-content.active {
      display: block;
    }

    .back-to-top {
      position: fixed;
      bottom: 15px;
      right: 20px;
      border: 1px solid #dddddd;
      padding: 10px 20px;
      border-radius: 25px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
      font-size: 13px;
      text-decoration: none;
      display: none;
      align-items: center;
      z-index: 1000;
    }

    .back-to-top:hover {
      background: #f0f0f0;
    }

    /* Dialog Styling */
    dialog {
      border: none;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      max-width: 500px;
      padding: 20px;
      font-family: Arial, sans-serif;
    }

    dialog::backdrop {
      background: rgba(0, 0, 0, 0.6);
    }

    label {
      display: block;
      margin-bottom: 8px;
      font-weight: bold;
    }

    textarea {
      width: 100%;
      border: 1px solid #cccccc;
      border-radius: 4px;
      padding: 8px;
      font-size: 1em;
      resize: vertical;
    }

    .dialog {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      margin-top: 20px;
    }

    .btn-primary {
      background: #0056b3;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1em;
    }

    .btn-primary:hover {
      background: #007bff;
    }

    .btn-secondary {
      background: #f8f9fa;
      color: #212529;
      border: 1px solid #cccccc;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1em;
    }

    .btn-secondary:hover {
      background: #e2e6ea;
    }

    /* Responsive */
    @media (max-width: 950px) {
      section {
        margin: 0;
        width: 96%;
        padding: 2%;
      }
    }

    @media (max-width: 600px) {
      .title {
        font-weight: bold;
        color: #ff6347;
        text-align: center;
        font-size: 20px;
        margin: 10px 0 -5px 0;
      }

      .item {
        height: 245px;
      }

      .viewers {
        float: left;
        text-align: left;
        width: 100%;
        margin-left: 30px;
        margin-top: 15px;
      }

      .viewers a {
        display: inline-block;
        vertical-align: middle;
      }

      .btn {
        margin: 0 20px 0 0;
      }

      .btn:first-child {
        padding: 0 20px;
      }
    }
  </style>
</head>

<body>
  <section>
    <h1 class="title">Tile server preview</h1>
    <div class="tabs">
      <div class="tab active" onclick="switchTab(event, 'styles-tab')">STYLES ({{style_count}})</div>
      <div class="tab" onclick="switchTab(event, 'geojsons-tab')">GEOJSONS ({{geojson_count}})</div>
      <div class="tab" onclick="switchTab(event, 'geojson_groups-tab')">GEOJSON GROUPS ({{geojson_group_count}})</div>
      <div class="tab" onclick="switchTab(event, 'datas-tab')">DATAS ({{data_count}})</div>
      <div class="tab" onclick="switchTab(event, 'fonts-tab')">FONTS ({{font_count}})</div>
      <div class="tab" onclick="switchTab(event, 'sprites-tab')">SPRITES ({{sprite_count}})</div>
      <div class="tab" onclick="switchTab(event, 'actions-tab')">ACTIONS</div>
      <div class="tab" onclick="switchTab(event, 'configs-tab')">CONFIGS</div>
    </div>
    <div id="styles-tab" class="tab-content active"></div>
    <div id="geojsons-tab" class="tab-content"></div>
    <div id="geojson_groups-tab" class="tab-content"></div>
    <div id="datas-tab" class="tab-content"></div>
    <div id="fonts-tab" class="tab-content"></div>
    <div id="sprites-tab" class="tab-content"></div>
    <div id="actions-tab" class="tab-content"></div>
    <div id="configs-tab" class="tab-content"></div>
  </section>

  <dialog id="updateConfigDialog">
    <form id="updateConfigForm" method="dialog">
      <label for="updateConfigInput">Enter JSON:</label>
      <textarea id="updateConfigInput" name="options" rows="10" cols="50" placeholder='{"key":"value"}'></textarea>
      <div class="dialog">
        <button type="submit" class="btn-primary">OK</button>
        <button type="button" class="btn-secondary" onclick="closeDialog('updateConfigDialog')">Cancel</button>
      </div>
    </form>
  </dialog>

  <dialog id="updateSeedDialog">
    <form id="updateSeedForm" method="dialog">
      <label for="updateSeedInput">Enter JSON:</label>
      <textarea id="updateSeedInput" name="options" rows="10" cols="50" placeholder='{"key":"value"}'></textarea>
      <div class="dialog">
        <button type="submit" class="btn-primary">OK</button>
        <button type="button" class="btn-secondary" onclick="closeDialog('updateSeedDialog')">Cancel</button>
      </div>
    </form>
  </dialog>

  <dialog id="updateCleanUpDialog">
    <form id="updateCleanUpForm" method="dialog">
      <label for="updateCleanUpInput">Enter JSON:</label>
      <textarea id="updateCleanUpInput" name="options" rows="10" cols="50" placeholder='{"key":"value"}'></textarea>
      <div class="dialog">
        <button type="submit" class="btn-primary">OK</button>
        <button type="button" class="btn-secondary" onclick="closeDialog('updateCleanUpDialog')">Cancel</button>
      </div>
    </form>
  </dialog>

  <dialog id="deleteConfigDialog">
    <form id="deleteConfigForm" method="dialog">
      <label for="deleteConfigInput">Enter JSON:</label>
      <textarea id="deleteConfigInput" name="options" rows="10" cols="50" placeholder='{"key":"value"}'></textarea>
      <div class="dialog">
        <button type="submit" class="btn-primary">OK</button>
        <button type="button" class="btn-secondary" onclick="closeDialog('deleteConfigDialog')">Cancel</button>
      </div>
    </form>
  </dialog>

  <dialog id="deleteSeedDialog">
    <form id="deleteSeedForm" method="dialog">
      <label for="deleteSeedInput">Enter JSON:</label>
      <textarea id="deleteSeedInput" name="options" rows="10" cols="50" placeholder='{"key":"value"}'></textarea>
      <div class="dialog">
        <button type="submit" class="btn-primary">OK</button>
        <button type="button" class="btn-secondary" onclick="closeDialog('deleteSeedDialog')">Cancel</button>
      </div>
    </form>
  </dialog>

  <dialog id="deleteCleanUpDialog">
    <form id="deleteCleanUpForm" method="dialog">
      <label for="deleteCleanUpInput">Enter JSON:</label>
      <textarea id="deleteCleanUpInput" name="options" rows="10" cols="50" placeholder='{"key":"value"}'></textarea>
      <div class="dialog">
        <button type="submit" class="btn-primary">OK</button>
        <button type="button" class="btn-secondary" onclick="closeDialog('deleteCleanUpDialog')">Cancel</button>
      </div>
    </form>
  </dialog>

  <dialog id="exportRenderDialog">
    <form id="exportRenderForm" method="dialog">
      <label for="exportRenderInput">Enter JSON:</label>
      <textarea id="exportRenderInput" name="options" rows="10" cols="50" placeholder='{"key":"value"}'></textarea>
      <div class="dialog">
        <button type="submit" class="btn-primary">Export</button>
        <button type="button" class="btn-secondary" onclick="closeDialog('exportRenderDialog');">Cancel</button>
      </div>
    </form>
  </dialog>

  <dialog id="exportDataDialog">
    <form id="exportDataForm" method="dialog">
      <label for="exportDataInput">Enter JSON:</label>
      <textarea id="exportDataInput" name="options" rows="10" cols="50" placeholder='{"key":"value"}'></textarea>
      <div class="dialog">
        <button type="submit" class="btn-primary">Export</button>
        <button type="button" class="btn-secondary" onclick="closeDialog('exportDataDialog');">Cancel</button>
      </div>
    </form>
  </dialog>

  <a href="#" class="back-to-top" onclick="scrollToTop(event)">Back to top</a>

  <script>
    const baseURL = "{{base_url}}";
    const emptyImageURL = `${baseURL}/images/placeholder.png`;

    function toggleURL(id, event) {
      event.preventDefault();

      const el = document.getElementById(id);

      if (el.style.display === "none") {
        el.style.display = "inline-block";
      } else {
        el.style.display = "none";
      }
    }

    function copyToClipboard(el) {
      el.select();

      document.execCommand("copy");

      setTimeout(() => {
        el.style.display = "none";
      }, 200);
    }

    function scrollToTop(event) {
      event.preventDefault();

      window.scrollTo({
        top: 0,
        behavior: "smooth",
      });
    }

    function switchTab(event, tabId) {
      document.querySelectorAll(".tab").forEach(tab => {
        tab.classList.remove("active");
      });

      document.querySelectorAll(".tab-content").forEach(content => {
        content.classList.remove("active");
      });

      event.currentTarget.classList.add("active");

      document.getElementById(tabId).classList.add("active");

      renderContents(tabId);
    }

    function renderContents(tabId) {
      const innerHTML = document.querySelector(`#${tabId}`).innerHTML.trim();

      if (tabId === "styles-tab" && !innerHTML) {
        document.querySelector("#styles-tab").innerHTML = `
          <div class="box">
            {{#each styles}}
              <div class="item">
                {{#if thumbnail}}<img src="{{thumbnail}}" alt="{{name}} preview" />{{else}}<img src="${emptyImageURL}" alt="{{name}} preview" />{{/if}}
                <div class="details">
                  <h3 class="name">{{name}}</h3>
                  <p>identifier: {{@key}}</p>
                  <p>cache: {{#if cache}}true{{else}}false{{/if}}</p>
                  <p class="services">
                    services: <a href="${baseURL}/styles/{{@key}}/style.json">StyleJSON</a>
                    {{#if thumbnail}}
                      | <a href="${baseURL}/styles/{{@key}}.json">TileJSON</a>
                      | <a href="${baseURL}/styles/{{@key}}/wmts.xml">WMTS</a>
                      | <a href="#" onclick="toggleURL('xyz_style_{{@key}}', event)">XYZ</a>
                      <input id="xyz_style_{{@key}}" style="display:none;cursor:pointer;" type="text" value="${baseURL}/styles/{{@key}}/{z}/{x}/{y}.png" onclick="copyToClipboard(this)" />
                    {{/if}}
                  </p>
                </div>
                <div class="viewers">
                    <a class="btn" href="${baseURL}/styles/{{@key}}/?vector{{viewer_hash}}">Client Render</a>
                    {{#if thumbnail}}
                      <a class="btn" href="${baseURL}/styles/{{@key}}/?raster{{viewer_hash}}">Backend Render</a>
                      {{#if cancel_render}}
                      <a class="btn" href="#" onclick="handleExportRender(event, '{{@key}}', 'cancel')">Cancel Render</a>
                      {{else}}
                      <a class="btn" href="#" onclick="handleExportRender(event, '{{@key}}', 'export')">Export Render</a>
                      {{/if}}
                    {{/if}}
                </div>
              </div>
            {{/each}}
          </div>
        `;
      } if (tabId === "geojsons-tab" && !innerHTML) {
        document.querySelector("#geojsons-tab").innerHTML = `
          <div class="box">
            {{#each geojsons}}
              <div class="item">
                <img src="${emptyImageURL}" alt="Empty image" />
                <div class="details">
                  <h3 class="name">{{layer}}</h3>
                  <p>identifier: {{layer}}</p>
                  <p>group: {{group}}</p>
                  <p>layer: {{layer}}</p>
                  <p>cache: {{#if cache}}true{{else}}false{{/if}}</p>
                  <p class="services">
                    services: <a href="${baseURL}/geojsons/{{group}}/{{layer}}.geojson">GeoJSON</a>
                    | <a href="${baseURL}/geojsons/{{group}}/{{layer}}.json">INFO</a>
                  </p>
                </div>
                <div class="viewers">
                  <a class="btn" href="${baseURL}/geojsons/{{group}}/{{layer}}/">Inspect</a>
                </div>
              </div>
            {{/each}}
          </div>
        `;
      } if (tabId === "geojson_groups-tab" && !innerHTML) {
        document.querySelector("#geojson_groups-tab").innerHTML = `
          <div class="box">
            {{#each geojson_groups}}
              <div class="item">
                <img src="${emptyImageURL}" alt="Empty image" />
                <div class="details">
                  <h3 class="name">{{@key}}</h3>
                  <p>identifier: {{@key}}</p>
                  <p class="services">
                    services: <a href="${baseURL}/geojsons/{{@key}}.json">INFO</a>
                  </p>
                </div>
                <div class="viewers">
                  <a class="btn" href="${baseURL}/geojsons/{{@key}}/">Inspect</a>
                </div>
              </div>
            {{/each}}
          </div>
        `;
      } else if (tabId === "datas-tab" && !innerHTML) {
        document.querySelector("#datas-tab").innerHTML = `
          <div class="box">
            {{#each datas}}
              <div class="item">
                {{#if thumbnail}}<img src="{{thumbnail}}" alt="{{name}} preview" />{{else}}<img src="${emptyImageURL}" alt="{{name}} preview" />{{/if}}
                <div class="details">
                  <h3 class="name">{{name}}</h3>
                  <p>identifier: {{@key}}</p>
                  <p>type: {{#if thumbnail}}raster{{else}}vector{{/if}} | ext: {{source_type}}</p>
                  <p>cache: {{#if cache}}true{{else}}false{{/if}}</p>
                  <p class="services">
                    services: <a href="${baseURL}/datas/{{@key}}.json">TileJSON</a>
                      | <a href="#" onclick="toggleURL('xyz_data_{{@key}}', event)">XYZ</a>
                      <input id="xyz_data_{{@key}}" style="display:none;cursor:pointer;" type="text" value="${baseURL}/datas/{{@key}}/{z}/{x}/{y}.{{format}}" onclick="copyToClipboard(this)" />
                  </p>
                </div>
                <div class="viewers">
                  {{#if thumbnail}}
                  <a class="btn" href="${baseURL}/datas/{{@key}}/{{viewer_hash}}">View</a>
                  {{else}}
                  <a class="btn" href="${baseURL}/datas/{{@key}}/{{viewer_hash}}">Inspect</a>
                  {{/if}}
                  {{#if cancel_export}}
                  <a class="btn" href="#" onclick="handleExportData(event, '{{@key}}', 'cancel')">Cancel Export</a>
                  {{else}}
                  <a class="btn" href="#" onclick="handleExportData(event, '{{@key}}', 'export')">Export Data</a>
                  {{/if}}
                </div>
              </div>
            {{/each}}
          </div>
        `;
      } else if (tabId === "fonts-tab" && !innerHTML) {
        document.querySelector("#fonts-tab").innerHTML = `
          <div class="box">
            {{#each fonts}}
              <div class="item">
                <img src="${emptyImageURL}" alt="Empty image" />
                <div class="details">
                  <h3 class="name">{{@key}}</h3>
                  <p>identifier: {{@key}}</p>
                  <p>cache: {{#if cache}}true{{else}}false{{/if}}</p>
                  <p class="services">
                    services: <a href="#" onclick="toggleURL('font_{{@key}}', event)">URL</a>
                    <input id="font_{{@key}}" style="display:none;cursor:pointer;" type="text" value="${baseURL}/fonts/{{@key}}/{range}.pbf" onclick="copyToClipboard(this)" />
                  </p>
                </div>
              </div>
            {{/each}}
          </div>
        `;
      } else if (tabId === "sprites-tab" && !innerHTML) {
        document.querySelector("#sprites-tab").innerHTML = `
          <div class="box">
            {{#each sprites}}
              <div class="item">
                <img src="${baseURL}/sprites/{{@key}}/sprite.png" alt="{{@key}} preview" />
                <div class="details">
                  <h3 class="name">{{@key}}</h3>
                  <p>identifier: {{@key}}</p>
                  <p>cache: {{#if cache}}true{{else}}false{{/if}}</p>
                  <p class="services">
                    services: <a href="${baseURL}/sprites/{{@key}}/sprite.json">JSON</a>
                    | <a href="${baseURL}/sprites/{{@key}}/sprite.png">PNG</a>
                    | <a href="#" onclick="toggleURL('sprite_{{@key}}', event)">URL</a>
                    <input id="sprite_{{@key}}" style="display:none;cursor:pointer;" type="text" value="${baseURL}/sprites/{{@key}}/sprite" onclick="copyToClipboard(this)" />
                  </p>
                </div>
              </div>
            {{/each}}
          </div>
        `;
      } else if (tabId === "actions-tab" && !innerHTML) {
        document.querySelector("#actions-tab").innerHTML = `
          <div class="box">
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Cancel sync</h3>
                <p>description: Cancel cleanup/seed tasks</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleAction(event, 'cancel')">Cancel sync</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Sync all</h3>
                <p>description: Start cleanup/seed tasks</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleAction(event, 'all')">Sync all</a>
              </div>
            </div>  
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Clean styles</h3>
                <p>description: Start cleanup styles</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleAction(event, 'cleanUpStyles')">Clean styles</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Clean geojsons</h3>
                <p>description: Start cleanup geojsons</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleAction(event, 'cleanUpGeoJSONs')">Clean geojsons</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Clean datas</h3>
                <p>description: Start cleanup datas</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleAction(event, 'cleanUpDatas')">Clean datas</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Clean sprites</h3>
                <p>description: Start cleanup sprites</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleAction(event, 'cleanUpSprites')">Clean sprites</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Clean fonts</h3>
                <p>description: Start cleanup fonts</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleAction(event, 'cleanUpFonts')">Clean fonts</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Seed styles</h3>
                <p>description: Start seed styles</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleAction(event, 'seedStyles')">Seed styles</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Seed geojsons</h3>
                <p>description: Start seed geojsons</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleAction(event, 'seedGeoJSONs')">Seed geojsons</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Seed datas</h3>
                <p>description: Start seed datas</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleAction(event, 'seedDatas')">Seed datas</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Seed sprites</h3>
                <p>description: Start seed sprites</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleAction(event, 'seedSprites')">Seed sprites</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Seed fonts</h3>
                <p>description: Start seed fonts</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleAction(event, 'seedFonts')">Seed fonts</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Summary service</h3>
                <p>description: Summary service</p>
              </div>
              <div class="viewers">
                <a class="btn" href="${baseURL}/summary?type=service">View</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Summary seed</h3>
                <p>description: Summary seed</p>
              </div>
              <div class="viewers">
                <a class="btn" href="${baseURL}/summary?type=seed">View</a>
              </div>
            </div>
          </div>
        `;
      } else if (tabId === "configs-tab" && !innerHTML) {
        document.querySelector("#configs-tab").innerHTML = `
          <div class="box">
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">View config JSON</h3>
                <p>description: View config.json content</p>
              </div>
              <div class="viewers">
                <a class="btn" href="${baseURL}/config?type=config">View</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">View seed JSON</h3>
                <p>description: View seed.json content</p>
              </div>
              <div class="viewers">
                <a class="btn" href="${baseURL}/config?type=seed">View</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">View cleanup JSON</h3>
                <p>description: View cleanup.json content</p>
              </div>
              <div class="viewers">
                <a class="btn" href="${baseURL}/config?type=cleanUp">View</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Update config JSON</h3>
                <p>description: Update config.json content</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleConfig(event, 'showUpdateConfig')">Update</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Update seed JSON</h3>
                <p>description: Update seed.json content</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleConfig(event, 'showUpdateSeed')">Update</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Update cleanup JSON</h3>
                <p>description: Update cleanup.json content</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleConfig(event, 'showUpdateCleanUp')">Update</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Delete config JSON</h3>
                <p>description: Delete config.json content</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleConfig(event, 'showDeleteConfig')">Delete</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Delete seed JSON</h3>
                <p>description: Delete seed.json content</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleConfig(event, 'showDeleteSeed')">Delete</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Delete cleanup JSON</h3>
                <p>description: Delete cleanup.json content</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleConfig(event, 'showDeleteCleanUp')">Delete</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Kill</h3>
                <p>description: Kill server</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleConfig(event, 'kill')">Kill server</a>
              </div>
            </div>
            <div class="item">
              <img src="${emptyImageURL}" alt="Empty image" />
              <div class="details">
                <h3 class="name">Restart</h3>
                <p>description: Restart server</p>
              </div>
              <div class="viewers">
                <a class="btn" href="#" onclick="handleConfig(event, 'restart')">Restart server</a>
              </div>
            </div>
          </div>
        `;
      }
    }

    function handleAction(event, action) {
      event.preventDefault();

      if (action === "all") {
        fetch(`${baseURL}/tasks/start?seedStyles=true&cleanUpStyles=true&cleanUpDatas=true&seedDatas=true&seedGeoJSONs=true&cleanUpGeoJSONs=true&seedSprites=true&cleanUpSprites=true&seedFonts=true&cleanUpFonts=true&restart=true`, {
          method: "GET",
        })
          .then((response) => {
            if (response.status === 200) {
              alert("Starting cleanup/seed tasks...");
            } else {
              alert(`Failed to start cleanup/seed tasks: Status code: ${response.status} - ${response.statusText}`);
            }
          })
          .catch((error) => alert(`Failed to start cleanup/seed tasks: ${error.message}`));
      } else if (action === "cleanUpStyles") {
        fetch(`${baseURL}/tasks/start?cleanUpStyles=true&restart=true`, {
          method: "GET",
        })
          .then((response) => {
            if (response.status === 200) {
              alert("Starting start cleanup styles...");
            } else {
              alert(`Failed to start cleanup styles: Status code: ${response.status} - ${response.statusText}`);
            }
          })
          .catch((error) => alert(`Failed to cleanup styles: ${error.message}`));
      } else if (action === "cleanUpGeoJSONs") {
        fetch(`${baseURL}/tasks/start?cleanUpGeoJSONs=true&restart=true`, {
          method: "GET",
        })
          .then((response) => {
            if (response.status === 200) {
              alert("Starting start cleanup geojsons...");
            } else {
              alert(`Failed to start cleanup geojsons: Status code: ${response.status} - ${response.statusText}`);
            }
          })
          .catch((error) => alert(`Failed to cleanup geojsons: ${error.message}`));
      } else if (action === "cleanUpDatas") {
        fetch(`${baseURL}/tasks/start?cleanUpDatas=true&restart=true`, {
          method: "GET",
        })
          .then((response) => {
            if (response.status === 200) {
              alert("Starting cleanup datas...");
            } else {
              alert(`Failed to start cleanup datas: Status code: ${response.status} - ${response.statusText}`);
            }
          })
          .catch((error) => alert(`Failed to start cleanup datas: ${error.message}`));
      } else if (action === "cleanUpSprites") {
        fetch(`${baseURL}/tasks/start?cleanUpSprites=true&restart=true`, {
          method: "GET",
        })
          .then((response) => {
            if (response.status === 200) {
              alert("Starting cleanup sprites...");
            } else {
              alert(`Failed to start cleanup sprites: Status code: ${response.status} - ${response.statusText}`);
            }
          })
          .catch((error) => alert(`Failed to start cleanup sprites: ${error.message}`));
      } else if (action === "cleanUpFonts") {
        fetch(`${baseURL}/tasks/start?cleanUpFonts=true&restart=true`, {
          method: "GET",
        })
          .then((response) => {
            if (response.status === 200) {
              alert("Starting cleanup fonts...");
            } else {
              alert(`Failed to start cleanup fonts: Status code: ${response.status} - ${response.statusText}`);
            }
          })
          .catch((error) => alert(`Failed to start cleanup fonts: ${error.message}`));
      } else if (action === "seedStyles") {
        fetch(`${baseURL}/tasks/start?seedStyles=true&restart=true`, {
          method: "GET",
        })
          .then((response) => {
            if (response.status === 200) {
              alert("Starting seed styles...");
            } else {
              alert(`Failed to start seed styles: Status code: ${response.status} - ${response.statusText}`);
            }
          })
          .catch((error) => alert(`Failed to start seed styles: ${error.message}`));
      } else if (action === "seedGeoJSONs") {
        fetch(`${baseURL}/tasks/start?seedGeoJSONs=true&restart=true`, {
          method: "GET",
        })
          .then((response) => {
            if (response.status === 200) {
              alert("Starting seed geojsons...");
            } else {
              alert(`Failed to start seed geojsons: Status code: ${response.status} - ${response.statusText}`);
            }
          })
          .catch((error) => alert(`Failed to start seed geojsons: ${error.message}`));
      } else if (action === "seedDatas") {
        fetch(`${baseURL}/tasks/start?seedDatas=true&restart=true`, {
          method: "GET",
        })
          .then((response) => {
            if (response.status === 200) {
              alert("Starting seed datas...");
            } else {
              alert(`Failed to start seed datas: Status code: ${response.status} - ${response.statusText}`);
            }
          })
          .catch((error) => alert(`Failed to start seed datas: ${error.message}`));
      } else if (action === "seedSprites") {
        fetch(`${baseURL}/tasks/start?seedSprites=true&restart=true`, {
          method: "GET",
        })
          .then((response) => {
            if (response.status === 200) {
              alert("Starting seed sprites...");
            } else {
              alert(`Failed to start seed sprites: Status code: ${response.status} - ${response.statusText}`);
            }
          })
          .catch((error) => alert(`Failed to start seed sprites: ${error.message}`));
      } else if (action === "seedFonts") {
        fetch(`${baseURL}/tasks/start?seedFonts=true&restart=true`, {
          method: "GET",
        })
          .then((response) => {
            if (response.status === 200) {
              alert("Starting seed fonts...");
            } else {
              alert(`Failed to start seed fonts: Status code: ${response.status} - ${response.statusText}`);
            }
          })
          .catch((error) => alert(`Failed to start seed fonts: ${error.message}`));
      } else if (action === "cancel") {
        fetch(`${baseURL}/tasks/cancel`, {
          method: "GET",
        })
          .then((response) => {
            if (response.status === 200) {
              alert("Canceling cleanup/seed tasks...");
            } else {
              alert(`Failed to cancel cleanup/seed tasks: Status code: ${response.status} - ${response.statusText}`);
            }
          })
          .catch((error) => alert(`Failed to cancel cleanup/seed tasks: ${error.message}`));
      }
    }

    function handleConfig(event, action) {
      event.preventDefault();

      if (action === "restart") {
        fetch(`${baseURL}/restart?type=restart`, {
          method: "GET",
        })
          .then((response) => {
            if (response.status === 200) {
              alert("Server restarted successfully!");
            } else {
              alert(`Failed to restart server: Status code: ${response.status} - ${response.statusText}`);
            }
          })
          .catch((error) => alert(`Failed to restart server: ${error.message}`));
      } else if (action === "kill") {
        fetch(`${baseURL}/restart?type=kill`, {
          method: "GET",
        })
          .then((response) => {
            if (response.status === 200) {
              alert("Server killed successfully!");
            } else {
              alert(`Failed to kill server: Status code: ${response.status} - ${response.statusText}`);
            }
          })
          .catch((error) => alert(`Failed to kill server: ${error.message}`));
      } else if (action === "showUpdateConfig") {
        document.getElementById("updateConfigDialog").showModal();

        document.getElementById("updateConfigForm").onsubmit = (event) => {
          event.preventDefault();

          fetch(`${baseURL}/config?type=config&restart=true`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: document.getElementById("updateConfigInput").value
          })
            .then((response) => {
              if (response.status === 200) {
                alert("Updating config...");

                closeDialog("updateConfigDialog");
              } else {
                alert(`Failed to update config: Status code: ${response.status} - ${response.statusText}`);
              }
            })
            .catch((error) => {
              alert(`Failed to update config: ${error.message}`);
            });
        };
      } else if (action === "showUpdateSeed") {
        document.getElementById("updateSeedDialog").showModal();

        document.getElementById("updateSeedForm").onsubmit = (event) => {
          event.preventDefault();

          fetch(`${baseURL}/config?type=seed&restart=true`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: document.getElementById("updateSeedInput").value
          })
            .then((response) => {
              if (response.status === 200) {
                alert("Updating seed...");

                closeDialog("updateSeedDialog");
              } else {
                alert(`Failed to update seed: Status code: ${response.status} - ${response.statusText}`);
              }
            })
            .catch((error) => {
              alert(`Failed to update seed: ${error.message}`);
            });
        };
      } else if (action === "showUpdateCleanUp") {
        document.getElementById("updateCleanUpDialog").showModal();

        document.getElementById("updateCleanUpForm").onsubmit = (event) => {
          event.preventDefault();

          fetch(`${baseURL}/config?type=cleanUp&restart=true`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: document.getElementById("updateCleanUpInput").value
          })
            .then((response) => {
              if (response.status === 200) {
                alert("Updating cleanup...");

                closeDialog("updateCleanUpDialog");
              } else {
                alert(`Failed to update cleanup: Status code: ${response.status} - ${response.statusText}`);
              }
            })
            .catch((error) => {
              alert(`Failed to update cleanup: ${error.message}`);
            });
        };
      } else if (action === "showDeleteConfig") {
        document.getElementById("deleteConfigDialog").showModal();

        document.getElementById("deleteConfigForm").onsubmit = (event) => {
          event.preventDefault();

          fetch(`${baseURL}/config?type=config&restart=true`, {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
            },
            body: document.getElementById("deleteConfigInput").value
          })
            .then((response) => {
              if (response.status === 200) {
                alert("Deleting config...");

                closeDialog("deleteConfigDialog");
              } else {
                alert(`Failed to delete config: Status code: ${response.status} - ${response.statusText}`);
              }
            })
            .catch((error) => {
              alert(`Failed to delete config: ${error.message}`);
            });
        };
      } else if (action === "showDeleteSeed") {
        document.getElementById("deleteSeedDialog").showModal();

        document.getElementById("deleteSeedForm").onsubmit = (event) => {
          event.preventDefault();

          fetch(`${baseURL}/config?type=seed&restart=true`, {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
            },
            body: document.getElementById("deleteSeedInput").value
          })
            .then((response) => {
              if (response.status === 200) {
                alert("Deleting seed...");

                closeDialog("deleteSeedDialog");
              } else {
                alert(`Failed to delete seed: Status code: ${response.status} - ${response.statusText}`);
              }
            })
            .catch((error) => {
              alert(`Failed to delete seed: ${error.message}`);
            });
        };
      } else if (action === "showDeleteCleanUp") {
        document.getElementById("deleteCleanUpDialog").showModal();

        document.getElementById("deleteCleanUpForm").onsubmit = (event) => {
          event.preventDefault();

          fetch(`${baseURL}/config?type=cleanUp&restart=true`, {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
            },
            body: document.getElementById("deleteCleanUpInput").value
          })
            .then((response) => {
              if (response.status === 200) {
                alert("Deleting cleanup...");

                closeDialog("deleteCleanUpDialog");
              } else {
                alert(`Failed to delete cleanup: Status code: ${response.status} - ${response.statusText}`);
              }
            })
            .catch((error) => {
              alert(`Failed to delete cleanup: ${error.message}`);
            });
        };
      }
    }

    function handleExportRender(event, styleID, action) {
      event.preventDefault();

      if (action === "export") {
        document.getElementById("exportRenderDialog").showModal();

        document.getElementById("exportRenderForm").onsubmit = (event) => {
          event.preventDefault();

          fetch(`${baseURL}/exports/style-render/${styleID}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: document.getElementById("exportRenderInput").value
          })
            .then((response) => {
              if (response.status === 201) {
                alert("Exporting render style...");

                closeDialog("exportRenderDialog");
              } else {
                alert(`Failed to export render style: Status code: ${response.status} - ${response.statusText}`);
              }
            })
            .catch((error) => {
              alert(`Failed to export render style: ${error.message}`);
            });
        }
      } else if (action === "cancel") {
        let maxRetries = 5;

        function tryFetch() {
          fetch(`${baseURL}/exports/style-render/${styleID}?cancel=true`, {
            method: "GET",
          })
            .then((response) => {
              if (response.status === 200) {
                alert("Canceling render style...");
              } else if (response.status === 404 && maxRetries-- >= 0) {
                tryFetch();
              } else {
                alert(`Failed to cancel render style: Status code: ${response.status} - ${response.statusText}`);
              }
            })
            .catch((error) => {
              alert(`Failed to cancel render style: ${error.message}`);
            });
        }

        tryFetch();
      }
    }

    function handleExportData(event, dataID, action) {
      event.preventDefault();

      if (action === "export") {
        document.getElementById("exportDataDialog").showModal();

        document.getElementById("exportDataForm").onsubmit = (event) => {
          event.preventDefault();

          fetch(`${baseURL}/exports/data/${dataID}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: document.getElementById("exportDataInput").value
          })
            .then((response) => {
              if (response.status === 201) {
                alert("Exporting data...");

                closeDialog("exportDataDialog");
              } else {
                alert(`Failed to export data: Status code: ${response.status} - ${response.statusText}`);
              }
            })
            .catch((error) => {
              alert(`Failed to export data: ${error.message}`);
            });
        }
      } else if (action === "cancel") {
        let maxRetries = 5;

        function tryFetch() {
          fetch(`${baseURL}/exports/data/${dataID}?cancel=true`, {
            method: "GET",
          })
            .then((response) => {
              if (response.status === 200) {
                alert("Canceling export data...");
              } else if (response.status === 404 && maxRetries-- >= 0) {
                tryFetch();
              } else {
                alert(`Failed to cancel export data: Status code: ${response.status} - ${response.statusText}`);
              }
            })
            .catch((error) => {
              alert(`Failed to cancel export data: ${error.message}`);
            });
        }

        tryFetch();
      }
    }

    function closeDialog(dialog) {
      document.getElementById(dialog).close();
    }

    window.onload = function () {
      renderContents("styles-tab");
    };

    window.addEventListener("scroll", () => {
      const backToTopButton = document.querySelector(".back-to-top");

      if (window.scrollY > 200) {
        backToTopButton.style.display = "flex";
      } else {
        backToTopButton.style.display = "none";
      }
    });
  </script>
</body>

</html>