<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>{{name}} - Tile Server</title>

  <link rel="stylesheet" type="text/css" href="{{base_url}}/maplibre-gl.css" />
  <link rel="stylesheet" type="text/css" href="{{base_url}}/maplibre-gl-inspect.css" />

  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial,Helvetica,sans-serif;
    }

    h1 {
      position:absolute;
      top:5px;
      right:0;
      width:240px;
      margin:0;
      font-size:18px;
    }

    #map {
      position:absolute;
      top:0;
      left:0;
      right:250px;
      bottom:0;
    }

    #layerList {
      position:absolute;
      top:35px;
      right:0;
      bottom:0;
      width:240px;
      max-height:100%;
      overflow-y:auto;
    }
  </style>

  <script src="{{base_url}}/maplibre-gl.js"></script>
  <script src="{{base_url}}/maplibre-gl-inspect.js"></script>
</head>

<body>
  <h1>Layer list</h1>
  <div id="map"></div>
  <div id="layerList">

  <script>
    const baseURL = "{{base_url}}";
    const id = "{{id}}";

    fetch(`${baseURL}/datas/${id}.json`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        },
      })
      .then((response) => {
        if (response.status === 200) {
          return response.json();
        } else {
          alert(`Failed to fetch tileJSON: Status code: ${response.status} - ${response.statusText}`);
        }
      })
      .then((jsonResponse) => {
        const style = {
          "version": 8,
          "sources": {
            "source": {
              "type": "vector",
              "url": `${baseURL}/datas/${id}.json`
            }
          },
          "layers": []
        };

        const cacheCoverageLayers = {};

        if (jsonResponse.cacheCoverages !== undefined) {
          for (const { bboxs, zooms } of jsonResponse.cacheCoverages) {
            for (const zoom of zooms) {
              if (cacheCoverageLayers[zoom] === undefined) {
                cacheCoverageLayers[zoom] = {
                  type: "FeatureCollection",
                  features: []
                };
              }

              for (const bbox of bboxs) {
                cacheCoverageLayers[zoom]["features"].push({
                  type: "Feature",
                  geometry: {
                    type: "LineString",
                    coordinates: [
                      [bbox[0], bbox[1]],
                      [bbox[2], bbox[1]],
                      [bbox[2], bbox[3]],
                      [bbox[0], bbox[3]],
                      [bbox[0], bbox[1]]
                    ]
                  }
                });
              }
            }

            for (const zoom in cacheCoverageLayers) {
              style["sources"][zoom] = {
                "type": "geojson",
                "data": cacheCoverageLayers[zoom]
              }
            }
          }
        }

        const map = new maplibregl.Map({
          container: "map",
          hash: true,
          style: style
        });

        map.addControl(new maplibregl.NavigationControl({
          visualizePitch: true
        }));

        const inspect = new MaplibreInspect({
          showInspectMap: true,
          showInspectButton: false
        });

        map.addControl(inspect);

        map.on("load", () => {
          const layerList = document.getElementById("layerList");

          for (const source in inspect.sources) {
            if (source === "source") {
              inspect.sources[source].forEach((layerID) => {
                const item = document.createElement("div");

                const layerColor = inspect.assignLayerColor(layerID);

                item.innerHTML = `
                  <div style="display:flex;align-items:center;cursor:pointer;">
                    <div style="width:15px;height:15px;display:inline-block;background:${layerColor};"></div>
                    <span style="margin-left:5px;color:${layerColor};display:inline-block;max-width:200px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;">${layerID}</span>
                  </div>
                `;

                item.onclick = () => {
                  const newVisibility = map.getLayoutProperty(`${source}_${layerID}_polygon`, "visibility") === "none" ? "visible" : "none";

                  map.setLayoutProperty(`${source}_${layerID}_polygon`, "visibility", newVisibility);
                  map.setLayoutProperty(`${source}_${layerID}_line`, "visibility", newVisibility);
                  map.setLayoutProperty(`${source}_${layerID}_circle`, "visibility", newVisibility);

                  item.style.textDecoration = newVisibility === "visible" ? "none" : "line-through";
                };

                layerList.appendChild(item);
              });
            } else {
              inspect.assignLayerColor(source);
            }
          }

          if (jsonResponse.cacheCoverages !== undefined) {
            let isCoverageVisible = true;

            function updateVisibleCoverages() {
              for (const zoom in cacheCoverageLayers) {
                map.setLayoutProperty(`${zoom}_polygon`, "visibility", "none");
                map.setLayoutProperty(`${zoom}_line`, "visibility", "none");
                map.setLayoutProperty(`${zoom}_circle`, "visibility", "none");
              }

              if (isCoverageVisible === true) {
                const currentZoom = Math.floor(map.getZoom());

                if (cacheCoverageLayers[currentZoom] !== undefined) {
                  map.setLayoutProperty(`${currentZoom}_polygon`, "visibility", "visible");
                  map.setLayoutProperty(`${currentZoom}_line`, "visibility", "visible");
                  map.setLayoutProperty(`${currentZoom}_circle`, "visibility", "visible");
                }
              }
            }

            map.on("zoomend", updateVisibleCoverages);

            const cacheCoveragesButton = document.createElement("div");
            cacheCoveragesButton.innerHTML = "Hide cache Coverages";
            cacheCoveragesButton.style.cssText = "position:absolute;bottom:50px;left:10px;padding:5px 10px;font-size:14px;cursor:pointer;background:rgba(0, 150, 255, 0.5);color:white;border:none;border-radius:5px;display:inline-block;z-index:1000;";

            cacheCoveragesButton.onclick = () => {
              if (isCoverageVisible === true) {
                cacheCoveragesButton.innerHTML = "Show cache Coverages";

                isCoverageVisible = false;
              } else {
                cacheCoveragesButton.innerHTML = "Hide cache Coverages";

                isCoverageVisible = true;
              }

              updateVisibleCoverages();
            };

            document.body.appendChild(cacheCoveragesButton);
          }
        });

        let currentMarker;

        map.on("click", (event) => {
          if (currentMarker) {
            currentMarker.remove();
          }

          currentMarker = new maplibregl.Marker({
            draggable: true
          })
            .setLngLat([event.lngLat.lng, event.lngLat.lat])
            .addTo(map);

          alert(`Position: [${event.lngLat.lng}, ${event.lngLat.lat}]`);

          currentMarker.on("dragend", () => {
            const lngLat = currentMarker.getLngLat();

            alert(`Position: [${lngLat.lng}, ${lngLat.lat}]`);
          });
        });

        map.on("contextmenu", (event) => {
          if (currentMarker) {
            currentMarker.remove();

            currentMarker = undefined;
          }
        });
      })
      .catch((error) => {
        alert(`Failed to fetch tileJSON: Status code: ${error.message}`);
      });
  </script>
</body>

</html>