<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>{{name}} - Tile Server</title>

  <link rel="stylesheet" type="text/css" href="{{base_url}}/maplibre-gl.css" />
  <link rel="stylesheet" type="text/css" href="{{base_url}}/leaflet.css" />

  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial,Helvetica,sans-serif;
    }

    #map {
      position:absolute;
      top:0;
      left:0;
      right:0;
      bottom:0;
    }
  </style>

  <script src="{{base_url}}/maplibre-gl.js"></script>
  <script src="{{base_url}}/leaflet.js"></script>
  <script src="{{base_url}}/leaflet-hash.js"></script>
</head>

<body>
  <div id="map"></div>

  <script>
    const baseURL = "{{base_url}}";
    const id = "{{id}}";

    if (location.search.indexOf("vector") >= 0) {
      const map = new maplibregl.Map({
        container: "map",
        style: `${baseURL}/styles/${id}/style.json`,
        hash: true
      });

      map.addControl(new maplibregl.NavigationControl({
        visualizePitch: true
      }));

      let currentMarker;

      map.on("click", (event) => {
        if (currentMarker !== undefined) {
          currentMarker.remove();
        }

        currentMarker = new maplibregl.Marker({
          draggable: true
        })
          .setLngLat([event.lngLat.lng, event.lngLat.lat])
          .addTo(map);

        alert(`Position: [${event.lngLat.lng}, ${event.lngLat.lat}]`);

        currentMarker.on("dragend", () => {
          const lngLat = currentMarker.getLngLat();

          alert(`Position: [${lngLat.lng}, ${lngLat.lat}]`);
        });
      });

      map.on("contextmenu", (event) => {
        if (currentMarker !== undefined) {
          currentMarker.remove();

          currentMarker = undefined;
        }
      });
    } else {
      fetch(`${baseURL}/styles/${id}.json`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        },
      })
        .then((response) => {
          if (response.status === 200) {
            return response.json();
          } else {
            alert(`Failed to fetch tileJSON: Status code: ${response.status} - ${response.statusText}`);
          }
        })
        .then((jsonResponse) => {
          const map = L.map("map", {
            zoomControl: false,
            maxBounds: [[-90, -180], [90, 180]],
            maxBoundsViscosity: 1
          });

          for (const tile of jsonResponse.tiles || []) {
            L.tileLayer(tile, {
              minZoom: jsonResponse.minzoom,
              maxZoom: jsonResponse.maxzoom,
              maxNativeZoom: 22,
              attribution: jsonResponse.attribution
            }).addTo(map);
          }

          new L.Control.Zoom({
            position: "topright"
          }).addTo(map);

          new L.Hash(map)

          let currentMarker;

          map.on("click", (event) => {
            if (currentMarker !== undefined) {
              currentMarker.remove();
            }

            currentMarker = L.marker([event.latlng.lat, event.latlng.lng], {
              draggable: true
            }).addTo(map);

            alert(`Position: [${event.latlng.lng}, ${event.latlng.lat}]`);

            currentMarker.on("dragend", () => {
              const position = currentMarker.getLatLng();

              alert(`Position: [${position.lng}, ${position.lat}]`);
            });
          });

          map.on("contextmenu", (event) => {
            if (currentMarker !== undefined) {
              currentMarker.remove();

              currentMarker = undefined;
            }
          });
        })
        .catch((error) => {
          alert(`Failed to fetch tileJSON: Status code: ${error.message}`);
        });
    }
  </script>
</body>

</html>